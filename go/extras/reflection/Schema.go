// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package reflection

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
)

type SchemaT struct {
	Objects    []*ObjectT
	Enums      []*EnumT
	FileIdent  string
	FileExt    string
	RootTable  *ObjectT
	Services   []*ServiceT
	Attributes []*KeyValueT
}

// SchemaT object pack function
func (t *SchemaT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	objectsOffset := flatbuffers.UOffsetT(0)
	if t.Objects != nil {
		objectsLength := len(t.Objects)
		objectsOffsets := make([]flatbuffers.UOffsetT, objectsLength)
		for j := objectsLength - 1; j >= 0; j-- {
			objectsOffsets[j] = t.Objects[j].Pack(builder)
		}
		SchemaStartObjectsVector(builder, objectsLength)
		for j := objectsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(objectsOffsets[j])
		}
		objectsOffset = SchemaEndObjectsVector(builder, objectsLength)
	}
	enumsOffset := flatbuffers.UOffsetT(0)
	if t.Enums != nil {
		enumsLength := len(t.Enums)
		enumsOffsets := make([]flatbuffers.UOffsetT, enumsLength)
		for j := enumsLength - 1; j >= 0; j-- {
			enumsOffsets[j] = t.Enums[j].Pack(builder)
		}
		SchemaStartEnumsVector(builder, enumsLength)
		for j := enumsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(enumsOffsets[j])
		}
		enumsOffset = SchemaEndEnumsVector(builder, enumsLength)
	}
	fileIdentOffset := flatbuffers.UOffsetT(0)
	if len(t.FileIdent) > 0 {
		fileIdentOffset = builder.CreateString(t.FileIdent)
	}
	fileExtOffset := flatbuffers.UOffsetT(0)
	if len(t.FileExt) > 0 {
		fileExtOffset = builder.CreateString(t.FileExt)
	}
	rootTableOffset := t.RootTable.Pack(builder)
	servicesOffset := flatbuffers.UOffsetT(0)
	if t.Services != nil {
		servicesLength := len(t.Services)
		servicesOffsets := make([]flatbuffers.UOffsetT, servicesLength)
		for j := servicesLength - 1; j >= 0; j-- {
			servicesOffsets[j] = t.Services[j].Pack(builder)
		}
		SchemaStartServicesVector(builder, servicesLength)
		for j := servicesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(servicesOffsets[j])
		}
		servicesOffset = SchemaEndServicesVector(builder, servicesLength)
	}
	attributesOffset := flatbuffers.UOffsetT(0)
	if t.Attributes != nil {
		attributesLength := len(t.Attributes)
		attributesOffsets := make([]flatbuffers.UOffsetT, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			attributesOffsets[j] = t.Attributes[j].Pack(builder)
		}
		SchemaStartAttributesVector(builder, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(attributesOffsets[j])
		}
		attributesOffset = SchemaEndAttributesVector(builder, attributesLength)
	}

	// pack process all field

	SchemaStart(builder)
	SchemaAddObjects(builder, objectsOffset)
	SchemaAddEnums(builder, enumsOffset)
	SchemaAddFileIdent(builder, fileIdentOffset)
	SchemaAddFileExt(builder, fileExtOffset)
	SchemaAddRootTable(builder, rootTableOffset)
	SchemaAddServices(builder, servicesOffset)
	SchemaAddAttributes(builder, attributesOffset)
	return SchemaEnd(builder)
}

// SchemaT object unpack function
func (rcv *Schema) UnPackTo(t *SchemaT) {
	objectsLength := rcv.ObjectsLength()
	t.Objects = make([]*ObjectT, objectsLength)
	for j := 0; j < objectsLength; j++ {
		x := Object{}
		rcv.Objects(&x, j)
		t.Objects[j] = x.UnPack()
	}
	enumsLength := rcv.EnumsLength()
	t.Enums = make([]*EnumT, enumsLength)
	for j := 0; j < enumsLength; j++ {
		x := Enum{}
		rcv.Enums(&x, j)
		t.Enums[j] = x.UnPack()
	}
	t.FileIdent = string(rcv.FileIdent())
	t.FileExt = string(rcv.FileExt())
	t.RootTable = rcv.RootTable(nil).UnPack()
	servicesLength := rcv.ServicesLength()
	t.Services = make([]*ServiceT, servicesLength)
	for j := 0; j < servicesLength; j++ {
		x := Service{}
		rcv.Services(&x, j)
		t.Services[j] = x.UnPack()
	}
	attributesLength := rcv.AttributesLength()
	t.Attributes = make([]*KeyValueT, attributesLength)
	for j := 0; j < attributesLength; j++ {
		x := KeyValue{}
		rcv.Attributes(&x, j)
		t.Attributes[j] = x.UnPack()
	}
}

func (rcv *Schema) UnPack() *SchemaT {
	if rcv == nil {
		return nil
	}
	t := &SchemaT{}
	rcv.UnPackTo(t)
	return t
}

type Schema struct {
	_tab flatbuffers.Table
}

// GetRootAsSchema shortcut to access root table
func GetRootAsSchema(buf []byte, offset flatbuffers.UOffsetT) *Schema {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Schema{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsSchema shortcut to access table in vector of  unions
func GetTableVectorAsSchema(table *flatbuffers.Table) *Schema {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Schema{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsSchema shortcut to access table in single union field
func GetTableAsSchema(table *flatbuffers.Table) *Schema {
	x := &Schema{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Schema) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Schema) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Schema) Objects(obj *Object, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Schema) ObjectsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Schema) Enums(obj *Enum, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Schema) EnumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Schema) FileIdent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Schema) FileExt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Schema) RootTable(obj *Object) *Object {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Object)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Schema) Services(obj *Service, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Schema) ServicesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Schema) Attributes(obj *KeyValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Schema) AttributesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SchemaStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}

func SchemaAddObjects(builder *flatbuffers.Builder, objects flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(objects), 0)
}

func SchemaStartObjectsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func SchemaEndObjectsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func SchemaAddEnums(builder *flatbuffers.Builder, enums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(enums), 0)
}

func SchemaStartEnumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func SchemaEndEnumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func SchemaAddFileIdent(builder *flatbuffers.Builder, fileIdent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fileIdent), 0)
}

func SchemaAddFileExt(builder *flatbuffers.Builder, fileExt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fileExt), 0)
}

func SchemaAddRootTable(builder *flatbuffers.Builder, rootTable flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rootTable), 0)
}

func SchemaAddServices(builder *flatbuffers.Builder, services flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(services), 0)
}

func SchemaStartServicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func SchemaEndServicesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func SchemaAddAttributes(builder *flatbuffers.Builder, attributes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(attributes), 0)
}

func SchemaStartAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func SchemaEndAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func SchemaEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
