// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package reflection

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
)

type KeyValueT struct {
	Key   string
	Value string
}

// KeyValueT object pack function
func (t *KeyValueT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	keyOffset := flatbuffers.UOffsetT(0)
	if len(t.Key) > 0 {
		keyOffset = builder.CreateString(t.Key)
	}
	valueOffset := flatbuffers.UOffsetT(0)
	if len(t.Value) > 0 {
		valueOffset = builder.CreateString(t.Value)
	}

	// pack process all field

	KeyValueStart(builder)
	KeyValueAddKey(builder, keyOffset)
	KeyValueAddValue(builder, valueOffset)
	return KeyValueEnd(builder)
}

// KeyValueT object unpack function
func (rcv *KeyValue) UnPackTo(t *KeyValueT) {
	t.Key = string(rcv.Key())
	t.Value = string(rcv.Value())
}

func (rcv *KeyValue) UnPack() *KeyValueT {
	if rcv == nil {
		return nil
	}
	t := &KeyValueT{}
	rcv.UnPackTo(t)
	return t
}

type KeyValue struct {
	_tab flatbuffers.Table
}

// GetRootAsKeyValue shortcut to access root table
func GetRootAsKeyValue(buf []byte, offset flatbuffers.UOffsetT) *KeyValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &KeyValue{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsKeyValue shortcut to access table in vector of  unions
func GetTableVectorAsKeyValue(table *flatbuffers.Table) *KeyValue {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &KeyValue{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsKeyValue shortcut to access table in single union field
func GetTableAsKeyValue(table *flatbuffers.Table) *KeyValue {
	x := &KeyValue{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *KeyValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *KeyValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *KeyValue) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *KeyValue) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func KeyValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}

func KeyValueAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}

func KeyValueAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}

func KeyValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
