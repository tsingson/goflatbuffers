// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package reflection

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
)

type TypeT struct {
	BaseType    BaseType
	Element     BaseType
	Index       int32
	FixedLength uint16
}

// TypeT object pack function
func (t *TypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}

	// pack process all field

	TypeStart(builder)
	TypeAddBaseType(builder, t.BaseType)
	TypeAddElement(builder, t.Element)
	TypeAddIndex(builder, t.Index)
	TypeAddFixedLength(builder, t.FixedLength)
	return TypeEnd(builder)
}

// TypeT object unpack function
func (rcv *Type) UnPackTo(t *TypeT) {
	t.BaseType = rcv.BaseType()
	t.Element = rcv.Element()
	t.Index = rcv.Index()
	t.FixedLength = rcv.FixedLength()
}

func (rcv *Type) UnPack() *TypeT {
	if rcv == nil {
		return nil
	}
	t := &TypeT{}
	rcv.UnPackTo(t)
	return t
}

type Type struct {
	_tab flatbuffers.Table
}

// GetRootAsType shortcut to access root table
func GetRootAsType(buf []byte, offset flatbuffers.UOffsetT) *Type {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Type{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsType shortcut to access table in vector of  unions
func GetTableVectorAsType(table *flatbuffers.Table) *Type {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Type{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsType shortcut to access table in single union field
func GetTableAsType(table *flatbuffers.Table) *Type {
	x := &Type{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Type) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Type) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Type) BaseType() BaseType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BaseType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Type) Element() BaseType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return BaseType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Type) Index() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Type) FixedLength() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func TypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}

func TypeAddBaseType(builder *flatbuffers.Builder, baseType BaseType) {
	builder.PrependInt8Slot(0, int8(baseType), 0)
}

func TypeAddElement(builder *flatbuffers.Builder, element BaseType) {
	builder.PrependInt8Slot(1, int8(element), 0)
}

func TypeAddIndex(builder *flatbuffers.Builder, index int32) {
	builder.PrependInt32Slot(2, index, -1)
}

func TypeAddFixedLength(builder *flatbuffers.Builder, fixedLength uint16) {
	builder.PrependUint16Slot(3, fixedLength, 0)
}

func TypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
