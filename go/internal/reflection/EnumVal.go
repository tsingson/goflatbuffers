// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package reflection

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
)

type EnumValT struct {
	Name          string
	Value         int64
	Object        *ObjectT
	UnionType     *TypeT
	Documentation []string
}

// EnumValT object pack function
func (t *EnumValT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if len(t.Name) > 0 {
		nameOffset = builder.CreateString(t.Name)
	}
	objectOffset := t.Object.Pack(builder)
	unionTypeOffset := t.UnionType.Pack(builder)
	documentationOffset := flatbuffers.UOffsetT(0)
	if t.Documentation != nil {
		documentationOffset = builder.StringsVector(t.Documentation...)
	}

	// pack process all field

	EnumValStart(builder)
	EnumValAddName(builder, nameOffset)
	EnumValAddValue(builder, t.Value)
	EnumValAddObject(builder, objectOffset)
	EnumValAddUnionType(builder, unionTypeOffset)
	EnumValAddDocumentation(builder, documentationOffset)
	return EnumValEnd(builder)
}

// EnumValT object unpack function
func (rcv *EnumVal) UnPackTo(t *EnumValT) {
	t.Name = string(rcv.Name())
	t.Value = rcv.Value()
	t.Object = rcv.Object(nil).UnPack()
	t.UnionType = rcv.UnionType(nil).UnPack()
	documentationLength := rcv.DocumentationLength()
	t.Documentation = make([]string, documentationLength)
	for j := 0; j < documentationLength; j++ {
		t.Documentation[j] = string(rcv.Documentation(j))
	}
}

func (rcv *EnumVal) UnPack() *EnumValT {
	if rcv == nil {
		return nil
	}
	t := &EnumValT{}
	rcv.UnPackTo(t)
	return t
}

type EnumVal struct {
	_tab flatbuffers.Table
}

// GetRootAsEnumVal shortcut to access root table
func GetRootAsEnumVal(buf []byte, offset flatbuffers.UOffsetT) *EnumVal {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EnumVal{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsEnumVal shortcut to access table in vector of  unions
func GetTableVectorAsEnumVal(table *flatbuffers.Table) *EnumVal {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &EnumVal{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsEnumVal shortcut to access table in single union field
func GetTableAsEnumVal(table *flatbuffers.Table) *EnumVal {
	x := &EnumVal{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *EnumVal) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EnumVal) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *EnumVal) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *EnumVal) Value() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *EnumVal) Object(obj *Object) *Object {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Object)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EnumVal) UnionType(obj *Type) *Type {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Type)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *EnumVal) Documentation(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EnumVal) DocumentationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func EnumValStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}

func EnumValAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}

func EnumValAddValue(builder *flatbuffers.Builder, value int64) {
	builder.PrependInt64Slot(1, value, 0)
}

func EnumValAddObject(builder *flatbuffers.Builder, object flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(object), 0)
}

func EnumValAddUnionType(builder *flatbuffers.Builder, unionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(unionType), 0)
}

func EnumValAddDocumentation(builder *flatbuffers.Builder, documentation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(documentation), 0)
}

func EnumValStartDocumentationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func EnumValEndDocumentationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func EnumValEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
