// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package reflection

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
)

type ObjectT struct {
	Name          string
	Fields        []*FieldT
	IsStruct      bool
	Minalign      int32
	Bytesize      int32
	Attributes    []*KeyValueT
	Documentation []string
}

// ObjectT object pack function
func (t *ObjectT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if len(t.Name) > 0 {
		nameOffset = builder.CreateString(t.Name)
	}
	fieldsOffset := flatbuffers.UOffsetT(0)
	if t.Fields != nil {
		fieldsLength := len(t.Fields)
		fieldsOffsets := make([]flatbuffers.UOffsetT, fieldsLength)
		for j := fieldsLength - 1; j >= 0; j-- {
			fieldsOffsets[j] = t.Fields[j].Pack(builder)
		}
		ObjectStartFieldsVector(builder, fieldsLength)
		for j := fieldsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(fieldsOffsets[j])
		}
		fieldsOffset = ObjectEndFieldsVector(builder, fieldsLength)
	}
	attributesOffset := flatbuffers.UOffsetT(0)
	if t.Attributes != nil {
		attributesLength := len(t.Attributes)
		attributesOffsets := make([]flatbuffers.UOffsetT, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			attributesOffsets[j] = t.Attributes[j].Pack(builder)
		}
		ObjectStartAttributesVector(builder, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(attributesOffsets[j])
		}
		attributesOffset = ObjectEndAttributesVector(builder, attributesLength)
	}
	documentationOffset := flatbuffers.UOffsetT(0)
	if t.Documentation != nil {
		documentationOffset = builder.StringsVector(t.Documentation...)
	}

	// pack process all field

	ObjectStart(builder)
	ObjectAddName(builder, nameOffset)
	ObjectAddFields(builder, fieldsOffset)
	ObjectAddIsStruct(builder, t.IsStruct)
	ObjectAddMinalign(builder, t.Minalign)
	ObjectAddBytesize(builder, t.Bytesize)
	ObjectAddAttributes(builder, attributesOffset)
	ObjectAddDocumentation(builder, documentationOffset)
	return ObjectEnd(builder)
}

// ObjectT object unpack function
func (rcv *Object) UnPackTo(t *ObjectT) {
	t.Name = string(rcv.Name())
	fieldsLength := rcv.FieldsLength()
	t.Fields = make([]*FieldT, fieldsLength)
	for j := 0; j < fieldsLength; j++ {
		x := Field{}
		rcv.Fields(&x, j)
		t.Fields[j] = x.UnPack()
	}
	t.IsStruct = rcv.IsStruct()
	t.Minalign = rcv.Minalign()
	t.Bytesize = rcv.Bytesize()
	attributesLength := rcv.AttributesLength()
	t.Attributes = make([]*KeyValueT, attributesLength)
	for j := 0; j < attributesLength; j++ {
		x := KeyValue{}
		rcv.Attributes(&x, j)
		t.Attributes[j] = x.UnPack()
	}
	documentationLength := rcv.DocumentationLength()
	t.Documentation = make([]string, documentationLength)
	for j := 0; j < documentationLength; j++ {
		t.Documentation[j] = string(rcv.Documentation(j))
	}
}

func (rcv *Object) UnPack() *ObjectT {
	if rcv == nil {
		return nil
	}
	t := &ObjectT{}
	rcv.UnPackTo(t)
	return t
}

type Object struct {
	_tab flatbuffers.Table
}

// GetRootAsObject shortcut to access root table
func GetRootAsObject(buf []byte, offset flatbuffers.UOffsetT) *Object {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Object{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsObject shortcut to access table in vector of  unions
func GetTableVectorAsObject(table *flatbuffers.Table) *Object {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Object{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsObject shortcut to access table in single union field
func GetTableAsObject(table *flatbuffers.Table) *Object {
	x := &Object{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Object) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Object) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Object) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Object) Fields(obj *Field, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Object) FieldsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Object) IsStruct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Object) Minalign() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Object) Bytesize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Object) Attributes(obj *KeyValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Object) AttributesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Object) Documentation(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Object) DocumentationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ObjectStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}

func ObjectAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}

func ObjectAddFields(builder *flatbuffers.Builder, fields flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fields), 0)
}

func ObjectStartFieldsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func ObjectEndFieldsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func ObjectAddIsStruct(builder *flatbuffers.Builder, isStruct bool) {
	builder.PrependBoolSlot(2, isStruct, false)
}

func ObjectAddMinalign(builder *flatbuffers.Builder, minalign int32) {
	builder.PrependInt32Slot(3, minalign, 0)
}

func ObjectAddBytesize(builder *flatbuffers.Builder, bytesize int32) {
	builder.PrependInt32Slot(4, bytesize, 0)
}

func ObjectAddAttributes(builder *flatbuffers.Builder, attributes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(attributes), 0)
}

func ObjectStartAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func ObjectEndAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func ObjectAddDocumentation(builder *flatbuffers.Builder, documentation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(documentation), 0)
}

func ObjectStartDocumentationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func ObjectEndDocumentationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func ObjectEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
