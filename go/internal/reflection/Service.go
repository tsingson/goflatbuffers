// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package reflection

import (
	flatbuffers "github.com/tsingson/goflatbuffers/go"
)

type ServiceT struct {
	Name          string
	Calls         []*RPCCallT
	Attributes    []*KeyValueT
	Documentation []string
}

// ServiceT object pack function
func (t *ServiceT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	nameOffset := flatbuffers.UOffsetT(0)
	if len(t.Name) > 0 {
		nameOffset = builder.CreateString(t.Name)
	}
	callsOffset := flatbuffers.UOffsetT(0)
	if t.Calls != nil {
		callsLength := len(t.Calls)
		callsOffsets := make([]flatbuffers.UOffsetT, callsLength)
		for j := callsLength - 1; j >= 0; j-- {
			callsOffsets[j] = t.Calls[j].Pack(builder)
		}
		ServiceStartCallsVector(builder, callsLength)
		for j := callsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(callsOffsets[j])
		}
		callsOffset = ServiceEndCallsVector(builder, callsLength)
	}
	attributesOffset := flatbuffers.UOffsetT(0)
	if t.Attributes != nil {
		attributesLength := len(t.Attributes)
		attributesOffsets := make([]flatbuffers.UOffsetT, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			attributesOffsets[j] = t.Attributes[j].Pack(builder)
		}
		ServiceStartAttributesVector(builder, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(attributesOffsets[j])
		}
		attributesOffset = ServiceEndAttributesVector(builder, attributesLength)
	}
	documentationOffset := flatbuffers.UOffsetT(0)
	if t.Documentation != nil {
		documentationOffset = builder.StringsVector(t.Documentation...)
	}

	// pack process all field

	ServiceStart(builder)
	ServiceAddName(builder, nameOffset)
	ServiceAddCalls(builder, callsOffset)
	ServiceAddAttributes(builder, attributesOffset)
	ServiceAddDocumentation(builder, documentationOffset)
	return ServiceEnd(builder)
}

// ServiceT object unpack function
func (rcv *Service) UnPackTo(t *ServiceT) {
	t.Name = string(rcv.Name())
	callsLength := rcv.CallsLength()
	t.Calls = make([]*RPCCallT, callsLength)
	for j := 0; j < callsLength; j++ {
		x := RPCCall{}
		rcv.Calls(&x, j)
		t.Calls[j] = x.UnPack()
	}
	attributesLength := rcv.AttributesLength()
	t.Attributes = make([]*KeyValueT, attributesLength)
	for j := 0; j < attributesLength; j++ {
		x := KeyValue{}
		rcv.Attributes(&x, j)
		t.Attributes[j] = x.UnPack()
	}
	documentationLength := rcv.DocumentationLength()
	t.Documentation = make([]string, documentationLength)
	for j := 0; j < documentationLength; j++ {
		t.Documentation[j] = string(rcv.Documentation(j))
	}
}

func (rcv *Service) UnPack() *ServiceT {
	if rcv == nil {
		return nil
	}
	t := &ServiceT{}
	rcv.UnPackTo(t)
	return t
}

type Service struct {
	_tab flatbuffers.Table
}

// GetRootAsService shortcut to access root table
func GetRootAsService(buf []byte, offset flatbuffers.UOffsetT) *Service {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Service{}
	x.Init(buf, n+offset)
	return x
}

// GetTableVectorAsService shortcut to access table in vector of  unions
func GetTableVectorAsService(table *flatbuffers.Table) *Service {
	n := flatbuffers.GetUOffsetT(table.Bytes[table.Pos:])
	x := &Service{}
	x.Init(table.Bytes, n+table.Pos)
	return x
}

// GetTableAsService shortcut to access table in single union field
func GetTableAsService(table *flatbuffers.Table) *Service {
	x := &Service{}
	x.Init(table.Bytes, table.Pos)
	return x
}

func (rcv *Service) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Service) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Service) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Service) Calls(obj *RPCCall, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Service) CallsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Service) Attributes(obj *KeyValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Service) AttributesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Service) Documentation(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Service) DocumentationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ServiceStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}

func ServiceAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}

func ServiceAddCalls(builder *flatbuffers.Builder, calls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(calls), 0)
}

func ServiceStartCallsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func ServiceEndCallsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func ServiceAddAttributes(builder *flatbuffers.Builder, attributes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(attributes), 0)
}

func ServiceStartAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func ServiceEndAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func ServiceAddDocumentation(builder *flatbuffers.Builder, documentation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(documentation), 0)
}

func ServiceStartDocumentationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}

func ServiceEndDocumentationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.EndVector(numElems)
}

func ServiceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
